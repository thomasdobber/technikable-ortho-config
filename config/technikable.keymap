/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
};

&lt { tapping-term-ms = <250>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */

        lm: lm {
            compatible = "zmk,behavior-macro-two-param";
            wait-ms = <0>;
            tap-ms = <0>;
            #binding-cells = <2>;
            bindings =
                <&macro_param_1to1>,
                <&macro_press>,
                <&mo MACRO_PLACEHOLDER &macro_param_2to1>,
                <&macro_press>,
                <&kp MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_param_2to1>,
                <&macro_release>,
                <&kp MACRO_PLACEHOLDER &macro_param_1to1>,
                <&macro_release>,
                <&mo MACRO_PLACEHOLDER>;
        };
    };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <14 15 16>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <20 19 21>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <19 20>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };

        lshft {
            bindings = <&kp LSHFT>;
            key-positions = <16 38>;
        };

        rshft {
            bindings = <&kp RSHFT>;
            key-positions = <19 41>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&mt LCTRL ESC  &kp Q  &kp W     &kp E     &kp R        &kp T         &kp Y  &kp U   &kp I      &kp O    &kp P     &kp BSPC
&kp TAB        &kp A  &kp S     &kp D     &kp F        &kp G         &kp H  &kp J   &kp K      &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X     &kp C     &kp V        &kp B         &kp N  &kp M   &kp COMMA  &kp DOT  &kp FSLH  &kp RET
                      &kp LALT  &kp LGUI  &lt 1 SPACE  &mo 2  &mo 3  &mo 4  &trans  &mo 5
            >;
        };

        lgui_layer {
            label = "GUI";
            bindings = <
&kp DEL  &kp LG(Q)        &kp LG(W)       &kp LG(L)       &kp LG(R)        &kp LG(T)          &trans  &trans  &trans  &trans  &trans  &trans
&trans   &mt LCTRL LG(A)  &mt LALT LG(S)  &mt LGUI LA(F)  &mt LSHFT LG(F)  &kp LG(G)          &trans  &trans  &trans  &trans  &trans  &trans
&trans   &kp LG(Z)        &kp LG(X)       &kp LG(C)       &kp LG(V)        &kp LG(B)          &trans  &trans  &trans  &trans  &trans  &trans
                          &trans          &trans          &kp X            &trans     &trans  &trans  &trans  &trans
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
&kp DEL  &kp LG(LS(Q))        &kp LG(LS(W))       &kp LG(LS(L))       &kp LG(LS(R))        &kp LG(LS(T))          &kp TILDE          &kp GRAVE         &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS       &kp LA(BSPC)
&trans   &mt LCTRL LG(LS(A))  &mt LALT LG(LS(S))  &mt LGUI LA(LS(F))  &mt LSHFT LG(LS(F))  &kp LG(LS(G))          &kp UNDER          &kp MINUS         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL      &trans
&trans   &kp LG(LS(Z))        &kp LG(LS(X))       &kp LG(LS(C))       &kp LG(LS(V))        &kp LG(LS(B))          &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE  &kp LBKT              &kp RBKT               &kp BACKSLASH  &trans
                              &trans              &trans              &trans               &kp X          &trans  &trans             &trans            &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
&kp DEL  &trans  &kp N1  &kp N2  &kp N3  &trans         &trans  &kp LA(RS(LEFT))    &kp RS(UP)         &kp LA(RS(RIGHT))   &trans     &kp LA(BSPC)
&trans   &trans  &kp N4  &kp N5  &kp N6  &trans         &trans  &mt RSHFT RS(LEFT)  &mt RGUI RS(DOWN)  &mt LALT RS(RIGHT)  &kp RCTRL  &trans
&trans   &trans  &kp N7  &kp N8  &kp N9  &trans         &trans  &trans              &trans             &trans              &trans     &trans
                 &trans  &trans  &kp N0  &trans  &kp X  &trans  &trans              &trans
            >;
        };

        arrow_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &kp LA(LEFT)    &kp UP         &kp LA(RIGHT)   &trans     &kp LA(BSPC)
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mt RSHFT LEFT  &mt RGUI DOWN  &mt LALT RIGHT  &kp RCTRL  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans          &trans         &trans          &trans     &trans
                &trans  &trans  &trans  &trans  &trans  &kp X   &trans          &trans
            >;

            label = "ARR";
        };

        bluetooth_layer {
            label = "BT";
            bindings = <
&none  &trans  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &trans         &none  &none   &trans  &none   &none  &bt BT_CLR
&none  &trans  &bt BT_SEL 4  &none         &none         &none          &none  &trans  &trans  &trans  &none  &none
&none  &none   &none         &none         &none         &none          &none  &none   &none   &none   &none  &none
               &none         &none         &bt BT_SEL 0  &none   &none  &none  &none   &kp X
            >;
        };
    };
};
