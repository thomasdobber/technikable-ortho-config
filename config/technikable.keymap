/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define BAS_L 0
#define NAV_L 1
#define NUM_L 2
#define SYM_L 3

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace

&lt { quick_tap_ms = <200>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <4 1>;
            then-layer = <2>;
        };
    };

    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <15 14>;
        };

        bspc {
            bindings = <&kp BACKSPACE>;
            key-positions = <20 21>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <21 20 22>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <14 15 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&kp Q  &kp W  &kp E      &kp R      &kp T     &kp LS(LPAR)          &kp LS(RPAR)  &kp Y               &kp U     &kp I      &kp O    &kp P
&kp A  &kp S  &kp D      &kp F      &kp G     &kp MINUS             &kp EQUAL     &kp H               &kp J     &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C      &kp V      &kp B     &kp LBKT              &kp RBKT      &kp N               &kp M     &kp COMMA  &kp DOT  &kp FSLH
              &kp GRAVE  &kp SPACE  &kp LEFT  &kp DOWN      &kp UP  &kp RIGHT     &lt 1 SINGLE_QUOTE  &kp BSLH
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
&trans            &kp N7       &kp N8       &kp N9             &trans  &trans         &trans  &trans  &kp MINUS             &kp UP_ARROW   &kp EQUAL       &trans
&kp LEFT_CONTROL  &mt LALT N4  &mt LGUI N5  &mt LEFT_SHIFT N6  &trans  &trans         &trans  &trans  &mt RIGHT_SHIFT LEFT  &mt RGUI DOWN  &mt LALT RIGHT  &mt RIGHT_CONTROL SQT
&trans            &kp N1       &kp N2       &kp N3             &trans  &trans         &trans  &trans  &kp GRAVE             &kp LBKT       &kp RBKT        &kp BSLH
                               &kp N0       &mo 4              &trans  &none   &none  &trans  &trans  &trans
            >;
        };

        layer_3 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N7  &kp N8  &kp N9  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &kp N1  &kp N2  &kp N3  &trans
                &trans  &trans  &trans  &trans  &trans  &trans  &trans  &kp N0
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans             &trans           &trans                 &trans  &trans          &trans  &trans  &kp AMPERSAND  &kp ASTERISK  &trans     &trans
&kp LT  &kp LEFT_BRACKET   &kp LEFT_BRACE   &kp LEFT_PARENTHESIS   &trans  &trans          &trans  &trans  &kp DOLLAR     &kp PERCENT   &kp CARET  &kp SEMI
&kp GT  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp RIGHT_PARENTHESIS  &trans  &trans          &trans  &trans  &kp EXCL       &kp AT        &kp HASH   &kp QUESTION
                           &trans           &trans                 &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        bt_layer {
            label = "Bluetooth";
            bindings = <
&bt BT_CLR  &trans        &trans        &trans        &trans        &trans                &trans  &trans  &trans  &trans  &trans  &trans
&trans      &trans        &trans        &trans        &trans        &trans                &trans  &trans  &trans  &trans  &trans  &trans
&trans      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans
            >;
        };
    };
};
