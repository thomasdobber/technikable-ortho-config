/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
};

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <14 15 16>;
        };

        ent {
            bindings = <&kp ENTER>;
            key-positions = <20 19 21>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <16 15>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <19 20>;
        };

        caps_word {
            bindings = <&caps_word>;
            key-positions = <16 19>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "Base";
            bindings = <
&mt LCTRL ESC  &kp Q  &kp W     &kp E     &kp R        &kp T            &kp Y       &kp U   &kp I        &kp O    &kp P     &kp BSPC
&kp TAB        &kp A  &kp S     &kp D     &kp F        &kp G            &kp H       &kp J   &kp K        &kp L    &kp SEMI  &kp SQT
&kp LSHFT      &kp Z  &kp X     &kp C     &kp V        &kp B            &kp N       &kp M   &kp COMMA    &kp DOT  &kp FSLH  &kp RET
                      &kp LALT  &kp LGUI  &lt 1 SPACE  &mo 2  &kp LEFT  &lt 3 DOWN  &kp UP  &lt 4 RIGHT
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
&trans  &kp LG(Q)        &kp LG(W)       &kp LG(L)       &kp LG(R)        &kp LG(T)          &trans  &kp MINUS  &kp UP    &kp EQUAL  &trans            &kp LA(BSPC)
&trans  &mt LCTRL LG(A)  &mt LALT LG(S)  &mt LGUI LA(F)  &mt LSHFT LG(F)  &kp LG(G)          &trans  &kp LEFT   &kp DOWN  &kp RIGHT  &kp SINGLE_QUOTE  &trans
&trans  &kp LG(Z)        &kp LG(X)       &kp LG(C)       &kp LG(V)        &trans             &trans  &kp GRAVE  &kp LBKT  &kp RBKT   &kp BSLH          &trans
                         &trans          &trans          &kp X            &trans     &trans  &trans  &trans     &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
&trans  &kp LG(LS(Q))        &kp LG(LS(W))       &kp LG(LS(L))       &kp LG(LS(R))        &kp LG(LS(T))          &trans  &kp N7  &kp N8  &kp N9  &trans  &kp DEL
&trans  &mt LCTRL LG(LS(A))  &mt LALT LG(LS(S))  &mt LGUI LA(LS(F))  &mt LSHFT LG(LS(F))  &kp LG(LS(G))          &trans  &kp N4  &kp N5  &kp N6  &kp N0  &trans
&trans  &kp LG(LS(Z))        &kp LG(LS(X))       &kp LG(LS(C))       &kp LG(LS(V))        &trans                 &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                             &trans              &trans              &trans               &kp X          &trans  &kp N0  &trans  &trans
            >;
        };

        mod_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans       &trans      &trans      &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &mt RSHFT J  &mt RGUI K  &mt LALT L  &mt RCTRL SEMI  &trans
&trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans       &trans      &trans      &trans          &trans
                &trans  &trans  &trans  &trans  &trans  &kp X   &trans       &trans
            >;

            label = "MOD";
        };

        bluetooth_layer {
            label = "BT";
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &none  &none   &trans  &none   &none  &none
&none  &bt BT_CLR    &none         &none         &none         &none                &none  &trans  &trans  &trans  &none  &none
&none  &none         &none         &none         &none         &none                &none  &none   &none   &none   &none  &none
                     &none         &none         &none         &none         &none  &none  &none   &trans
            >;
        };
    };
};
