/*
 * Copyright (c) 2022 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&caps_word {
};

&lt { tapping-term-ms = <250>; };

/ {
    chosen { zmk,matrix_transform = &ortho_transform; };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    macros {
        /**
         * Temporarily switches to a layer (`&mo`) while a modifier is held.
         * Analogous to QMK's `LM()`, using a parameterized macro.
         *
         * Params:
         *  1. Layer to switch to
         *  2. Modifier to press while layer is active
         *
         * Example:
         *  `&lm NUM_LAYER LSHIFT`
         */
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
&kp Q  &kp W  &kp E  &kp R        &kp T  &trans          &trans  &kp Y  &kp U  &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F        &kp G  &trans          &trans  &kp H  &kp J  &kp K      &kp L    &kp SEMI
&kp Z  &kp X  &kp C  &kp V        &kp B  &trans          &trans  &kp N  &kp M  &kp COMMA  &kp DOT  &kp FSLH
              &mo 1  &lt 5 SPACE  &mo 2  &trans  &trans  &mo 3   &mo 5  &mo 4
            >;
        };

        gui_layer {
            label = "GUI";
            bindings = <
&kp LG(Q)        &kp LG(W)       &kp LG(L)       &kp LG(R)        &kp LG(T)  &trans          &trans  &kp LS(Y)  &kp LS(U)  &kp LS(I)      &kp LS(O)    &kp LS(P)
&mt LCTRL LG(A)  &mt LALT LG(S)  &mt LGUI LA(F)  &mt LSHFT LG(F)  &kp LG(G)  &trans          &trans  &kp LS(H)  &kp LS(J)  &kp LS(K)      &kp LS(L)    &kp LS(SEMI)
&kp LG(Z)        &kp LG(X)       &kp LG(C)       &kp LG(V)        &kp LG(B)  &trans          &trans  &kp LS(N)  &kp LS(M)  &kp LS(COMMA)  &kp LS(DOT)  &kp LS(FSLH)
                                 &kp X           &trans           &trans     &trans  &trans  &trans  &trans     &trans
            >;
        };

        lower_layer {
            bindings = <
&kp LG(LS(Q))        &kp LG(LS(W))       &kp LG(LS(L))       &kp LG(LS(R))        &kp LG(LS(T))  &trans          &trans  &trans  &kp GRAVE  &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp DEL
&mt LCTRL LG(LS(A))  &mt LALT LG(LS(S))  &mt LGUI LA(LS(F))  &mt LSHFT LG(LS(F))  &kp LG(LS(G))  &trans          &trans  &trans  &kp MINUS  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp EQUAL
&kp LG(LS(Z))        &kp LG(LS(X))       &kp LG(LS(C))       &kp LG(LS(V))        &kp LG(LS(B))  &trans          &trans  &trans  &kp SQT    &kp LBKT              &kp RBKT               &kp BACKSLASH
                                         &trans              &trans               &kp X          &trans  &trans  &trans  &trans  &trans
            >;

            label = "LOWER";
        };

        raise_layer {
            bindings = <
&trans        &kp N1       &kp N2       &kp N3        &trans  &trans          &trans  &kp LA(LEFT)  &kp LA(DOWN)    &kp LA(UP)   &kp LA(RIGHT)   &trans
&mt LCTRL N0  &mt LALT N4  &mt LGUI N5  &mt LSHFT N6  &trans  &trans          &trans  &kp LEFT      &mt RSHFT DOWN  &mt RGUI UP  &mt LALT RIGHT  &kp RCTRL
&trans        &kp N7       &kp N8       &kp N9        &trans  &trans          &trans  &kp LG(LEFT)  &kp LG(DOWN)    &kp LG(UP)   &kp LG(RIGHT)   &trans
                           &trans       &trans        &trans  &trans  &trans  &kp X   &trans        &trans
            >;

            label = "RAISE";
        };

        bluetooth_layer {
            label = "BLT";
            bindings = <
&kp RS(Q)  &kp RS(W)  &kp RS(E)  &kp RS(R)  &kp RS(T)  &none         &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&kp RS(A)  &kp RS(S)  &kp RS(D)  &kp RS(F)  &kp RS(G)  &none         &none   &none         &none         &none         &none         &none
&kp RS(Z)  &kp RS(X)  &kp RS(C)  &kp RS(V)  &kp RS(B)  &none         &none   &bt BT_CLR    &none         &none         &none         &none
                      &none      &trans     &none      &none  &none  &none   &trans        &kp X
            >;
        };

        power_layer {
            bindings = <
&trans     &trans    &kp LA(C)     &kp LS(TAB)    &trans      &trans          &trans  &trans      &kp LA(BSPC)    &kp ENTER           &trans    &trans
&kp LCTRL  &kp LALT  &mt LGUI ESC  &mt LSHFT TAB  &caps_word  &trans          &trans  &caps_word  &mt LSHFT BSPC  &mt RGUI LS(ENTER)  &kp LALT  &kp LCTRL
&trans     &trans    &trans        &trans         &trans      &trans          &trans  &trans      &trans          &trans              &trans    &trans
                     &trans        &kp X          &trans      &trans  &trans  &trans  &kp X       &trans
            >;

            label = "PWR";
        };
    };
};
